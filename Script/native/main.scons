#!python
import os, subprocess, sys

# Try to detect the host platform automatically.
# This is used if no `platform` argument is passed
if sys.platform.startswith('linux'):
    host_platform = 'linux'
elif sys.platform == 'darwin':
    host_platform = 'osx'
elif sys.platform == 'win32':
    host_platform = 'windows'

opts = Variables([], ARGUMENTS)

# Gets the standard flags CC, CCX, etc.
env = DefaultEnvironment()

# Define our options
opts.Add(EnumVariable('target', "Compilation target", 'debug', ['d', 'debug', 'r', 'release']))
opts.Add(EnumVariable('platform', "Compilation platform", '', ['', 'windows', 'x11', 'linux', 'osx']))
opts.Add(EnumVariable('p', "Compilation target, alias for 'platform'", '', ['', 'windows', 'x11', 'linux', 'osx']))
opts.Add(BoolVariable('use_llvm', "Use the LLVM / Clang compiler", 'no'))
opts.Add(PathVariable('target_path', 'The path where the lib is installed.', 'bin/'))
opts.Add(PathVariable('target_name', 'The library name.', 'libkwadsim', PathVariable.PathAccept))

# Local dependency paths, adapt them to your setup
godot_headers_path = "godot-cpp/godot_headers/"
cpp_bindings_path = "godot-cpp/"
cpp_library = "libgodot-cpp"

# only support 64 at this time..
bits = 64

# Updates the environment with the option variables.
opts.Update(env)

# Process some arguments
if env['use_llvm']:
    env['CC'] = 'clang'
    env['CXX'] = 'clang++'

if env['p'] != '':
    env['platform'] = env['p']

if env['platform'] == '':
    print("No valid target platform selected.")
    quit();

# Check our platform specifics
if env['platform'] == "osx":
    env['target_path'] += 'osx/'
    cpp_library += '.osx'
    env.Append(CXXFLAGS='-std=c++14')
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS = ['-g','-O2', '-arch', 'x86_64'])
        env.Append(LINKFLAGS = ['-arch', 'x86_64'])
    else:
        env.Append(CCFLAGS = ['-g','-O3', '-arch', 'x86_64'])
        env.Append(LINKFLAGS = ['-arch', 'x86_64'])

elif env['platform'] in ('x11', 'linux'):
    env['target_path'] += 'x11/'
    cpp_library += '.linux'
    env.Append(CXXFLAGS='-std=c++14')
    env.Append(LINKFLAGS=['-Tbetaflight/src/main/target/SITL/pg.ld'])
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS = ['-fPIC', '-g3','-O0'])
    else:
        env.Append(CCFLAGS = ['-fPIC', '-g','-O3'])

elif env['platform'] == "windows":
    if host_platform == "windows": 
        env['target_path'] += 'win64/'
        cpp_library += '.windows'
        # This makes sure to keep the session environment variables on windows,
        # that way you can run scons in a vs 2017 prompt and it will find all the required tools
        env.Append(ENV = os.environ)

        env.Append(CCFLAGS = ['-DWIN32', '-D_WIN32', '-D_WINDOWS', '-W3', '-GR', '-D_CRT_SECURE_NO_WARNINGS'])
        if env['target'] in ('debug', 'd'):
            env.Append(CCFLAGS = ['-EHsc', '-D_DEBUG', '-MDd'])
        else:
            env.Append(CCFLAGS = ['-O2', '-EHsc', '-DNDEBUG', '-MD'])
    else:
        env['target_path'] += 'win64/'
        cpp_library += '.windows'
        env['CC'] = 'x86_64-w64-mingw32-gcc'
        env['CXX'] = 'x86_64-w64-mingw32-g++'
        
        env.Append(CXXFLAGS='-std=c++14')
        env.Append(LIBS=['wsock32', 'ws2_32', 'ucrt'])
        env.Append(CCFLAGS = ['-mno-ms-bitfields', '-g'])
        env.Append(LINKFLAGS = ['--static', '-Wl,--no-undefined', '-static-libgcc', '-static-libstdc++'])
        env.Append(LINKFLAGS=['-Tbetaflight/src/main/target/SITL/pg.ld'])



if env['target'] in ('debug', 'd'):
    cpp_library += '.debug'
else:
    cpp_library += '.release'

cpp_library += '.' + str(bits)

# make sure our binding library is properly includes
env.Append(CPPPATH=['.', godot_headers_path, cpp_bindings_path + 'include/', cpp_bindings_path + 'include/core/', cpp_bindings_path + 'include/gen/'])
env.Append(LIBPATH=[cpp_bindings_path + 'bin/'])
env.Append(LIBS=[cpp_library])

# tweak this if you want to use different folders, or more folders, to store your source code in.
env.Append(CPPPATH=['src/'])
sources = Glob('src/*.cpp')

env.Append(CPPDEFINES=['SIMULATOR_BUILD'])
env.Append(CPPDEFINES=['__TARGET__=\\"KWADSIM\\"'])

revision = "de1c1d537"
env.Append(CPPDEFINES=['__REVISION__=\\"' + revision + '\\"'])

env.Append(CPPDEFINES=['HSE_VALUE=8000000'])
env.Append(CPPDEFINES=['FLASH_SIZE=2048'])


env.Append(CPPPATH=['betaflight/lib/main/dyad'])
env.Append(CPPPATH=['betaflight/src/main'])

#env.Append(CCFLAGS = ['-include', 'drivers/serial_tcp.h'])

betaflight_sources = [
    "build/build_config.c",
    "build/debug.c",
    "build/version.c",
#    "main.c",
    "cli/cli.c",
    "cli/settings.c",
#    "drivers/adc.c",
    "drivers/buf_writer.c",
    "drivers/bus.c",
#    "drivers/bus_i2c_config.c",
    "drivers/bus_i2c_busdev.c",
    "drivers/bus_i2c_soft.c",
#    "drivers/bus_spi.c",
#    "drivers/bus_spi_config.c",
#    "drivers/bus_spi_pinconfig.c",
    "drivers/buttons.c",
    "drivers/display.c",
    "drivers/dma_reqmap.c",
    "drivers/exti.c",
    "drivers/io.c",
    "drivers/light_led.c",
    "drivers/mco.c",
    "drivers/pinio.c",
    "drivers/resource.c",
#    "drivers/rcc.c",
    "drivers/serial.c",
#    "drivers/serial_pinconfig.c",
#    "drivers/serial_uart.c",
#    "drivers/serial_uart_pinconfig.c",
    "drivers/sound_beeper.c",
    "drivers/stack_check.c",
#    "drivers/system.c",
    "drivers/timer_common.c",
#    "drivers/timer.c",
    "drivers/transponder_ir_arcitimer.c",
    "drivers/transponder_ir_ilap.c",
    "drivers/transponder_ir_erlt.c",
    "fc/board_info.c",
    "fc/config.c",
    "fc/dispatch.c",
    "fc/hardfaults.c",
    "fc/tasks.c",
    "fc/runtime_config.c",
    "fc/stats.c",
    "io/beeper.c",
    "io/piniobox.c",
    "io/serial.c",
    "io/smartaudio_protocol.c",
    "io/statusindicator.c",
    "io/tramp_protocol.c",
    "io/transponder_ir.c",
    "io/usb_cdc_hid.c",
    "io/usb_msc.c",
    "msp/msp.c",
    "msp/msp_box.c",
    "msp/msp_serial.c",
    "scheduler/scheduler.c",
    "sensors/adcinternal.c",
    "sensors/battery.c",
    "sensors/current.c",
    "sensors/voltage.c",
    "target/config_helper.c",
    "fc/init.c",
    "fc/controlrate_profile.c",
    "drivers/camera_control.c",
    "drivers/accgyro/gyro_sync.c",
    "drivers/pwm_esc_detect.c",
#    "drivers/pwm_output.c",
    "drivers/rx/rx_spi.c",
#    "drivers/rx/rx_xn297.c",
    "drivers/rx/rx_pwm.c",
    "drivers/serial_softserial.c",
    "fc/core.c",
    "fc/rc.c",
    "fc/rc_adjustments.c",
    "fc/rc_controls.c",
    "fc/rc_modes.c",
    "flight/position.c",
    "flight/failsafe.c",
    "flight/gps_rescue.c",
    "flight/imu.c",
    "flight/mixer.c",
    "flight/mixer_tricopter.c",
    "flight/pid.c",
    "flight/servos.c",
    "flight/servos_tricopter.c",
    "io/serial_4way.c",
    "io/serial_4way_avrootloader.c",
    "io/serial_4way_stk500v2.c",
    "rx/ibus.c",
    "rx/jetiexbus.c",
    "rx/msp.c",
    "rx/pwm.c",
    "rx/rx.c",
    "rx/rx_spi.c",
    "rx/rx_spi_common.c",
    "rx/crsf.c",
    "rx/sbus.c",
    "rx/sbus_channels.c",
    "rx/spektrum.c",
    "io/spektrum_vtx_control.c",
    "io/spektrum_rssi.c",
    "rx/sumd.c",
    "rx/sumh.c",
    "rx/xbus.c",
    "rx/fport.c",
    "sensors/acceleration.c",
    "sensors/boardalignment.c",
    "sensors/compass.c",
    "sensors/gyro.c",
    "flight/gyroanalyse.c",
    "flight/rpm_filter.c",
    "sensors/initialisation.c",
    "blackbox/blackbox.c",
    "blackbox/blackbox_encoding.c",
#    "blackbox/blackbox_io.c",
    "cms/cms.c",
    "cms/cms_menu_blackbox.c",
    "cms/cms_menu_builtin.c",
    "cms/cms_menu_failsafe.c",
    "cms/cms_menu_gps_rescue.c",
    "cms/cms_menu_imu.c",
    "cms/cms_menu_ledstrip.c",
    "cms/cms_menu_misc.c",
    "cms/cms_menu_osd.c",
    "cms/cms_menu_power.c",
    "cms/cms_menu_saveexit.c",
    "cms/cms_menu_vtx_rtc6705.c",
    "cms/cms_menu_vtx_smartaudio.c",
    "cms/cms_menu_vtx_tramp.c",
#    "drivers/display_ug2864hsweg01.c",
    "drivers/light_ws2811strip.c",
    "drivers/rangefinder/rangefinder_hcsr04.c",
    "drivers/rangefinder/rangefinder_lidartf.c",
#    "drivers/serial_escserial.c",
    "drivers/vtx_common.c",
    "drivers/vtx_table.c",
    "io/dashboard.c",
#    "io/displayport_max7456.c",
    "io/displayport_msp.c",
#    "io/displayport_oled.c",
    "io/displayport_srxl.c",
    "io/displayport_crsf.c",
    "io/displayport_hott.c",
    "io/rcdevice_cam.c",
    "io/rcdevice.c",
    "io/gps.c",
    "io/ledstrip.c",
#    "io/pidaudio.c",
    "osd/osd.c",
    "osd/osd_elements.c",
    "sensors/barometer.c",
    "sensors/rangefinder.c",
    "telemetry/telemetry.c",
#    "telemetry/crsf.c",
#    "telemetry/srxl.c",
    "telemetry/frsky_hub.c",
    "telemetry/hott.c",
    "telemetry/jetiexbus.c",
    "telemetry/smartport.c",
    "telemetry/ltm.c",
    "telemetry/mavlink.c",
    "telemetry/msp_shared.c",
    "telemetry/ibus.c",
    "telemetry/ibus_shared.c",
    "sensors/esc_sensor.c",
    "io/vtx_string.c",
    "io/vtx.c",
    "io/vtx_rtc6705.c",
    "io/vtx_smartaudio.c",
    "io/vtx_tramp.c",
    "io/vtx_control.c",

    # SITL:
    "drivers/accgyro/accgyro_fake.c",
    "drivers/barometer/barometer_fake.c",
    "drivers/compass/compass_fake.c",
]

betaflight_sources = ["betaflight/src/main/" + x for x in betaflight_sources]


betaflight_sources.append("betaflight/lib/main/dyad/dyad.c")
betaflight_sources += Glob("src/*.c")

betaflight_sources += Glob("betaflight/src/main/pg/*.c")
betaflight_sources += Glob("betaflight/src/main/common/*.c", exclude="betaflight/src/main/common/string_light.c")
betaflight_sources += Glob("betaflight/src/main/config/*.c")

betaflight_sources += Glob("drivers/*.c")
betaflight_sources += Glob("io/*.c")

sources += betaflight_sources



library = env.SharedLibrary(target=env['target_path'] + env['target_name'] , source=sources)

Default(library)

# Generates help for the -h scons option.
Help(opts.GenerateHelpText(env))
